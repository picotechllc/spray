name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch --tags
          VERSION=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$VERSION" ]; then
            VERSION="v0.0.0"
          fi
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-amd64:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-amd64-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-amd64-
            ${{ runner.os }}-go-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-amd64
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  build-arm64:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-arm64-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-arm64-
            ${{ runner.os }}-go-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-arm64
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  create-manifest:
    needs: [tag, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }} \
            ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-arm64

      - name: Create and push latest manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/spray:latest \
            ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/spray:${{ needs.tag.outputs.new_version }}-arm64

